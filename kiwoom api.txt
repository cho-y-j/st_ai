[대체거래소 - 조회, 실시간 시세]

      ※ 주의사항
      OpenAPI TR목록은 요건에 따라 수시로 변경될 수 있으로 주기적으로 OpenAPI버전처리후 KOA Studio로 확인해주세요.
      
      대체거래소 지원으로 한국거래소(이하 KRX), 넥스트레이드(이하 NXT), 통합종목(또는 통합호가종목, 이하 AL)별 종목코드로 분류

      종목코드로 분기 (대상TR 68개)
      입력항목에 "종목코드"가 있는 TR (OPT10001, OPT10002, OPT10003 등)에서 조회
      KRX조회는 기존 6자리 종목코드 그대로 사용
      NXT, 통합종목은 기존 6자리 종목코드에 "_NX", "_AL"추가
      예시) "039490"의 KRX, NXT, 통합종목 종목코드 "039490", "039490_NX", "039490_AL"

      // 통합종목 조회 요청
      SetInputValue("종목코드"	, "039490_AL");
      CommRqData(RQName	, "OPT10001"	,  "0"	, "화면번호"); 

      // NXT 조회 요청
      SetInputValue("종목코드"	, "039490_NX");
      CommRqData(RQName	, "OPT10001"	, "0"	, "화면번호");

      실시간 시세데이터, 종목코드
      // 실시간 시세 데이터 종목코드는 조회한 종목코드로 전달
      "039490_AL" 조회시 "종목코드 = 039490_AL"
      "039490_NX" 조회시 "종목코드 = 039490_NX"

      TR 입력항목 "거래소구분" 추가 (대상 TR 43개)
      거래소구분=1:KRX, 2:NXT, 3:통합
      거래소구분=1, 2, 3으로 조회시 각각 KRX, NXT, 통합종목 데이터 조회

      OPT10016 : 신고저가요청
      OPT10017 : 상하한가요청
      OPT10018 : 고저가근접요청
      OPT10019 : 가격급등락요청
      OPT10020 : 호가잔량상위요청
      OPT10021 : 호가잔량급증요청
      OPT10022 : 잔량율급증요청
      OPT10023 : 거래량급증요청
      OPT10024 : 거래량갱신요청
      OPT10025 : 매물대집중요청
      OPT10026 : 고저PER요청
      OPT10027 : 전일대비등락률상위요청
      OPT10028 : 시가대비등락률요청
      OPT10029 : 예상체결등락률상위요청
      OPT10030 : 당일거래량상위요청
      OPT10031 : 전일거래량상위요청
      OPT10032 : 거래대금상위요청
      OPT10033 : 신용비율상위요청
      OPT10034 : 외인기간별매매상위요청
      OPT10035 : 외인연속순매매상위요청
      OPT10036 : 외인한도소진율증가상위
      OPT10037 : 외국계창구매매상위요청
      OPT10039 : 증권사별매매상위요청
      OPT10042 : 순매수거래원순위요청
      OPT10043 : 거래원매물대분석요청
      OPT10047 : 체결강도추이일별요청
      OPT10051 : 업종별투자자순매수요청
      OPT10052 : 거래원순간거래량요청
      OPT10054 : 변동성완화장치발동종목요청
      OPT10058 : 투자자별일별매매종목요청
      OPT10062 : 동일순매매순위요청
      OPT10063 : 장중투자자별매매요청
      OPT10066 : 장중투자자별매매차트요청
      OPT10131 : 기관외국인연속매매현황요청
      OPT40004 : ETF전체시세요청
      OPT90001 : 테마그룹별요청
      OPT90002 : 테마구성종목요청
      OPT90003 : 프로그램순매수상위50요청
      OPT90004 : 종목별프로그램매매현황요청
      OPT90005 : 프로그램매매추이요청
      OPT90006 : 프로그램매매차익잔고추이요청
      OPT90007 : 프로그램매매누적추이요청
      OPT90009 : 외국인기관매매상위요청

      ※ 주의사항
      OpenAPI TR목록은 요건에 따라 수시로 변경될 수 있으로 OpenAPI버전처리후 KOA Studio로 확인해주세요.
      
      거래소구분=0:통합, 1:KRX, 2:NXT (대상TR 3개)
      거래소구분=0, 1, 2으로 조회시 각각 통합종목 시세, KRX시세, NXT 시세 조회
      OPT10075 : 미체결요청
      OPT10076 : 체결요청
      OPT10085 : 계좌수익률요청

      거래소구분=KRX:한국거래소, NXT:대체거래소 (대상TR 3개)
      OPW00004 : 계좌평가현황요청
      OPW00005 : 체결잔고요청
      OPW00018 : 계좌평가잔고내역요청

      거래소구분=%:전체, KRX:한국거래소, NXT:대체거래소, SOR:최선주문집행 (대상TR 3개)
      OPW00007 : 계좌별주문체결내역상세요청
      OPW00009 : 계좌별주문체결현황요청
      OPW00015 : 위탁종합거래내역요청
      
      
      [조회처리(조회요청)]
      OpenAPI가 제공하는 데이터중에서 원하는 데이터를 서버에 요청해서 수신 받는 것을 말합니다.
      이는 하나의 TR(Transaction)단위로 처리됩니다.
      각 TR은 서버와 데이터를 주고받을때 약속된 규약입니다. 
      각각의 TR은 입력부분(Input)과 출력부분(Output)을 가지고 있습니다.
      Input은 사용하는 TR에따라 항목이 달라지며 사용자(고객)가 입력해야 하는 부분이고,
      Output은 요청에대한 서버의 응답으로 수신되는 데이터 입니다.
      Output은 여러항목으로 제공되며 필요한 항목의 값만을 골라서 얻을 수 있습니다.
      
      출력부분은 항목이 하나로 전달되는 싱글데이터와 복수의 건수로 전달되는 멀티데이터가 있습니다.
      TR에 따라 싱글데이터(또는 멀티데이터)만 있거나 둘다 있는 경우도 있습니다.
      OPT10070 : 당일주요거래원요청 - 싱글데이터
      OPT10081 : 주식일봉차트조회요청 - 싱글 + 멀티데이터
      
      OpenAPI가 제공하는 TR들은 KOA Studio의 "TR목록" 탭에서 찾아볼 수 있습니다.
      이중 필요한 TR을 선택하여 약속된 Input값을 입력 후 서버에 요청하면
      해당 TR에 정의되어 있는 Output 항목들의 값을 구할 수 있습니다.
      
      ※ 주의할 점 : 
      조회시 입력값 항목들은 SetInputValue 함수로 반드시 순서에 맞게 입력해야 합니다.
      계좌비밀번호는 별도의 입력창으로 입력/등록하고 조회시에는 공백으로 입력합니다.
          ex) SetInputValue("비밀번호"	,  ""); 
      
      
      [조회요청/수신 사용법]
      조회요청하고자 하는 TR의 입력값(input)을 셋팅한뒤 조회요청을 합니다.
      서버는 요청에대한 결과를 보내주고 이벤트를 발생시켜 데이터를 수신합니다.
      수신한 데이터중 필요한 항목에 해당하는 값을 구합니다.
		
      SetInputValue(사용자 호출) -> CommRqData(사용자 호출) -> OnReceiveTrData(이벤트 발생)
		
		
      [연속조회]
      TR별로 한번에 전달할 수 있는 데이터 갯수가 정해져 있습니다. 
      이 갯수보다 조회할 데이터가 많을때는 연속조회로 모든 데이터를 조회할 수 있습니다.
      연속조회는 CommRqData()에서 인자값만 바꿔서 다시 요청합니다.

      CommRqData("일별데이터조회", "OPT10086" , 0, "0001");      
      위처럼 요청한 데이터가 한번에 수신된 데이터보다 더 많이 있다면
      OnReceiveTRData()이벤트에서 5번째 인자값(sPrevNext)에 "2"가 전달됩니다.
      이때 더 많은 데이터를 요청하고자 할때는
      CommRqData("일별데이터조회", "OPT10086" , 2, "0001"); 
      위처럼 3번째 인자값을 2로 설정해서 조회하시면 됩니다.
      정리하면 다음과 같습니다.
      OpenAPI.CommRqData("일별데이터조회", "OPT10086" , 0, "0001"); // 처음조회시 혹은 연속데이터가 없을때
      OpenAPI.CommRqData("일별데이터조회", "OPT10086" , 2, "0001"); // 연속조회시 (필요에따라 요청)
	  
      ※ 주의할 점 : 
      중간에 다른 TR 요청이 있는 경우 연속조회가 되지 않습니다.
      
	  
      [실시간 데이터]
      시세조회요청이 성공하면 해당종목의 실시간시세 데이터가 서버에 자동으로 등록됩니다.
      이후 해당종목의 실시간 시세데이터는 OnReceiveRealData() 이벤트로 수신됩니다.
      또는 시세조회가 필요없고 실시간시세만 필요한 경우는 
      SetRealReg 함수를 사용하여 특정종목(복수종목 가능)의 실시간시세를 서버에 등록할 수 있습니다.
	  
      ※ SetRealReg() 함수는 조건검색 항목에서 사용법을 설명하고 있습니다.
	  
      KOA Studio의 실시간 탭을 여시면 Real Type (실시간타입) 목록을 확인할 수 있습니다.
      이들 하나하나를 실시간 타입이라고 합니다.
      각 실시간타입에 포함되는 데이터항목들의 FID(Field ID)들이 그룹핑되어 있습니다.
      예를들어 실시간 타입 "주식시세"는 FID 10 현재가 ~ FID 568 하한가발생시간까지 FID로 구성되며 한꺼번에 전달됩니다.
      또 실시간 타입 "주식체결"는 FID 20 체결시간 ~ FID 1313 Extra Item까지 FID가 한번에 전달됩니다.
      
	  
      [실시간시세 사용법]
      시세관련 TR서비스를 요청하는 경우 자동으로 서버에 해당 종목의 실시간시세가 등록 됩니다.
      시세관련 TR서비스 조회요청이 불필요한 경우 SetRealReg 함수를 통해 조회없이 실시간시세 등록이 가능합니다.
		
      방법1. 조회 서비스 이용
      SetInputValue(사용자 호출) -> CommRqData(사용자 호출) -> OnReceiveTrData(이벤트 발생) ->OnReceiveRealData(이벤트 발생)
      방법2. SetRealReg 함수 이용
      SetRealReg(사용자 호출) -> OnReceiveRealData(이벤트 발생)


      [주문관련 실시간 데이터]
      실시간 타입 "주문체결", "잔고", "파생잔고"는 주문관련 실시간 데이터를 전달합니다.
      데이터요청이나 서버등록 필요없이 주문발생시 수신되는 실시간타입 입니다.

      실시간 시세와는 다르게 조회요청이나 SetRealReg() 함수로 등록해서 사용할 수 없습니다.
      반드시 주문을 하셔야 발생합니다.
      수신 이벤트는 OnReceiveChejanData() 입니다.
      영웅문4 HTS, 영웅문S MTS 를 통한 주문들도 동일ID로 접속한 경우 OpenAPI로 수신됩니다.

	  
      아래 실시간 타입은 시스템 내부용으로, 사용자가 사용할수 없는 실시간 타입입니다.
      1. 임의연장정보
      2. 시간외종목정보
      3. 주식거래원
      4. 순간체결량
      5. 선물옵션합계
      6. 투자자별매매
	  
	  
          [LONG CommConnect()]
          
          수동 로그인설정인 경우 로그인창을 출력.
          자동로그인 설정인 경우 로그인창에서 자동으로 로그인을 시도합니다.
      

          [void CommTerminate()]
          
          프로그램 종료없이 서버와의 접속만 단절시키는 함수입니다.
          ※ 함수 사용 후 사용자의 오해소지가 생기는 이유로 더 이상 사용할 수 없는 함수입니다.
        [LONG GetConnectState()]
          
          서버와 현재 접속 상태를 알려줍니다.
          리턴값 1:연결, 0:연결안됨
           [LONG GetLoginInfo()]
          
          로그인 후 사용할 수 있으며 인자값에 대응하는 정보를 얻을 수 있습니다.
          
          인자는 다음값을 사용할 수 있습니다.
          
          "ACCOUNT_CNT" : 보유계좌 갯수를 반환합니다.
          "ACCLIST" 또는 "ACCNO" : 구분자 ';'로 연결된 보유계좌 목록을 반환합니다.
          "USER_ID" : 사용자 ID를 반환합니다.
          "USER_NAME" : 사용자 이름을 반환합니다.
          "GetServerGubun" : 접속서버 구분을 반환합니다.(1 : 모의투자, 나머지 : 실거래 서버)
          "KEY_BSECGB" : 키보드 보안 해지여부를 반환합니다.(0 : 정상, 1 : 해지)
          "FIREW_SECGB" : 방화벽 설정여부를 반환합니다.(0 : 미설정, 1 : 설정, 2 : 해지)
          
          리턴값
          인자값에 대응하는 정보를 얻을 수 있습니다.
          ------------------------------------------------------------------------------------------------------------------------------------
          
          [보유계좌 목록 예시]
          
          CString   strAcctList = GetLoginInfo("ACCLIST");
          여기서 strAcctList는 ';'로 분리한 보유계좌 목록임
          예) "3040525910;5678905510;3040526010"
          
          ----------------------------------------------         
          
          [OnEventConnect()이벤트]
          
          OnEventConnect(
          long nErrCode   // 로그인 상태를 전달하는데 자세한 내용은 아래 상세내용 참고
          )
          
          로그인 처리 이벤트입니다. 성공이면 인자값 nErrCode가 0이며 에러는 다음과 같은 값이 전달됩니다.
 
          nErrCode별 상세내용
          -100 사용자 정보교환 실패
          -101 서버접속 실패
          -102 버전처리 실패
          

          [OnEventConnect()이벤트]
          
          OnEventConnect(
          long nErrCode   // 로그인 상태를 전달하는데 자세한 내용은 아래 상세내용 참고
          )
          
          로그인 처리 이벤트입니다. 성공이면 인자값 nErrCode가 0이며 에러는 다음과 같은 값이 전달됩니다.
 
          nErrCode별 상세내용
          -100 사용자 정보교환 실패
          -101 서버접속 실패
          -102 버전처리 실패
          

          [OnReceiveMsg()이벤트]
          
          OnReceiveMsg(
          BSTR sScrNo,   // 화면번호
          BSTR sRQName,  // 사용자 구분명
          BSTR sTrCode,  // TR이름
          BSTR sMsg     // 서버에서 전달하는 메시지
          )
          
          데이터 요청 또는 주문전송 후에 서버가 보낸 메시지를 수신합니다.
          예) "조회가 완료되었습니다" 
          예) "계좌번호 입력을 확인해주세요" 
          예) "조회할 자료가 없습니다." 
          예) "증거금 부족으로 주문이 거부되었습니다."
		  
          ※ 주의할 점 : 
          메시지에 포함된 6자리 코드번호는 변경될 수 있으니, 여기에 수신된 코드번호를 특정 용도로 사용하지 마시기 바랍니다.
       [대체거래소 - 조회, 실시간 시세]

      ※ 주의사항
      OpenAPI TR목록은 요건에 따라 수시로 변경될 수 있으로 주기적으로 OpenAPI버전처리후 KOA Studio로 확인해주세요.
      
      대체거래소 지원으로 한국거래소(이하 KRX), 넥스트레이드(이하 NXT), 통합종목(또는 통합호가종목, 이하 AL)별 종목코드로 분류

      종목코드로 분기 (대상TR 68개)
      입력항목에 "종목코드"가 있는 TR (OPT10001, OPT10002, OPT10003 등)에서 조회
      KRX조회는 기존 6자리 종목코드 그대로 사용
      NXT, 통합종목은 기존 6자리 종목코드에 "_NX", "_AL"추가
      예시) "039490"의 KRX, NXT, 통합종목 종목코드 "039490", "039490_NX", "039490_AL"

      // 통합종목 조회 요청
      SetInputValue("종목코드"	, "039490_AL");
      CommRqData(RQName	, "OPT10001"	,  "0"	, "화면번호"); 

      // NXT 조회 요청
      SetInputValue("종목코드"	, "039490_NX");
      CommRqData(RQName	, "OPT10001"	, "0"	, "화면번호");

      실시간 시세데이터, 종목코드
      // 실시간 시세 데이터 종목코드는 조회한 종목코드로 전달
      "039490_AL" 조회시 "종목코드 = 039490_AL"
      "039490_NX" 조회시 "종목코드 = 039490_NX"

      TR 입력항목 "거래소구분" 추가 (대상 TR 43개)
      거래소구분=1:KRX, 2:NXT, 3:통합
      거래소구분=1, 2, 3으로 조회시 각각 KRX, NXT, 통합종목 데이터 조회

      OPT10016 : 신고저가요청
      OPT10017 : 상하한가요청
      OPT10018 : 고저가근접요청
      OPT10019 : 가격급등락요청
      OPT10020 : 호가잔량상위요청
      OPT10021 : 호가잔량급증요청
      OPT10022 : 잔량율급증요청
      OPT10023 : 거래량급증요청
      OPT10024 : 거래량갱신요청
      OPT10025 : 매물대집중요청
      OPT10026 : 고저PER요청
      OPT10027 : 전일대비등락률상위요청
      OPT10028 : 시가대비등락률요청
      OPT10029 : 예상체결등락률상위요청
      OPT10030 : 당일거래량상위요청
      OPT10031 : 전일거래량상위요청
      OPT10032 : 거래대금상위요청
      OPT10033 : 신용비율상위요청
      OPT10034 : 외인기간별매매상위요청
      OPT10035 : 외인연속순매매상위요청
      OPT10036 : 외인한도소진율증가상위
      OPT10037 : 외국계창구매매상위요청
      OPT10039 : 증권사별매매상위요청
      OPT10042 : 순매수거래원순위요청
      OPT10043 : 거래원매물대분석요청
      OPT10047 : 체결강도추이일별요청
      OPT10051 : 업종별투자자순매수요청
      OPT10052 : 거래원순간거래량요청
      OPT10054 : 변동성완화장치발동종목요청
      OPT10058 : 투자자별일별매매종목요청
      OPT10062 : 동일순매매순위요청
      OPT10063 : 장중투자자별매매요청
      OPT10066 : 장중투자자별매매차트요청
      OPT10131 : 기관외국인연속매매현황요청
      OPT40004 : ETF전체시세요청
      OPT90001 : 테마그룹별요청
      OPT90002 : 테마구성종목요청
      OPT90003 : 프로그램순매수상위50요청
      OPT90004 : 종목별프로그램매매현황요청
      OPT90005 : 프로그램매매추이요청
      OPT90006 : 프로그램매매차익잔고추이요청
      OPT90007 : 프로그램매매누적추이요청
      OPT90009 : 외국인기관매매상위요청

      ※ 주의사항
      OpenAPI TR목록은 요건에 따라 수시로 변경될 수 있으로 OpenAPI버전처리후 KOA Studio로 확인해주세요.
      
      거래소구분=0:통합, 1:KRX, 2:NXT (대상TR 3개)
      거래소구분=0, 1, 2으로 조회시 각각 통합종목 시세, KRX시세, NXT 시세 조회
      OPT10075 : 미체결요청
      OPT10076 : 체결요청
      OPT10085 : 계좌수익률요청

      거래소구분=KRX:한국거래소, NXT:대체거래소 (대상TR 3개)
      OPW00004 : 계좌평가현황요청
      OPW00005 : 체결잔고요청
      OPW00018 : 계좌평가잔고내역요청

      거래소구분=%:전체, KRX:한국거래소, NXT:대체거래소, SOR:최선주문집행 (대상TR 3개)
      OPW00007 : 계좌별주문체결내역상세요청
      OPW00009 : 계좌별주문체결현황요청
      OPW00015 : 위탁종합거래내역요청
      
      
      [조회처리(조회요청)]
      OpenAPI가 제공하는 데이터중에서 원하는 데이터를 서버에 요청해서 수신 받는 것을 말합니다.
      이는 하나의 TR(Transaction)단위로 처리됩니다.
      각 TR은 서버와 데이터를 주고받을때 약속된 규약입니다. 
      각각의 TR은 입력부분(Input)과 출력부분(Output)을 가지고 있습니다.
      Input은 사용하는 TR에따라 항목이 달라지며 사용자(고객)가 입력해야 하는 부분이고,
      Output은 요청에대한 서버의 응답으로 수신되는 데이터 입니다.
      Output은 여러항목으로 제공되며 필요한 항목의 값만을 골라서 얻을 수 있습니다.
      
      출력부분은 항목이 하나로 전달되는 싱글데이터와 복수의 건수로 전달되는 멀티데이터가 있습니다.
      TR에 따라 싱글데이터(또는 멀티데이터)만 있거나 둘다 있는 경우도 있습니다.
      OPT10070 : 당일주요거래원요청 - 싱글데이터
      OPT10081 : 주식일봉차트조회요청 - 싱글 + 멀티데이터
      
      OpenAPI가 제공하는 TR들은 KOA Studio의 "TR목록" 탭에서 찾아볼 수 있습니다.
      이중 필요한 TR을 선택하여 약속된 Input값을 입력 후 서버에 요청하면
      해당 TR에 정의되어 있는 Output 항목들의 값을 구할 수 있습니다.
      
      ※ 주의할 점 : 
      조회시 입력값 항목들은 SetInputValue 함수로 반드시 순서에 맞게 입력해야 합니다.
      계좌비밀번호는 별도의 입력창으로 입력/등록하고 조회시에는 공백으로 입력합니다.
          ex) SetInputValue("비밀번호"	,  ""); 
      
      
      [조회요청/수신 사용법]
      조회요청하고자 하는 TR의 입력값(input)을 셋팅한뒤 조회요청을 합니다.
      서버는 요청에대한 결과를 보내주고 이벤트를 발생시켜 데이터를 수신합니다.
      수신한 데이터중 필요한 항목에 해당하는 값을 구합니다.
		
      SetInputValue(사용자 호출) -> CommRqData(사용자 호출) -> OnReceiveTrData(이벤트 발생)
		
		
      [연속조회]
      TR별로 한번에 전달할 수 있는 데이터 갯수가 정해져 있습니다. 
      이 갯수보다 조회할 데이터가 많을때는 연속조회로 모든 데이터를 조회할 수 있습니다.
      연속조회는 CommRqData()에서 인자값만 바꿔서 다시 요청합니다.

      CommRqData("일별데이터조회", "OPT10086" , 0, "0001");      
      위처럼 요청한 데이터가 한번에 수신된 데이터보다 더 많이 있다면
      OnReceiveTRData()이벤트에서 5번째 인자값(sPrevNext)에 "2"가 전달됩니다.
      이때 더 많은 데이터를 요청하고자 할때는
      CommRqData("일별데이터조회", "OPT10086" , 2, "0001"); 
      위처럼 3번째 인자값을 2로 설정해서 조회하시면 됩니다.
      정리하면 다음과 같습니다.
      OpenAPI.CommRqData("일별데이터조회", "OPT10086" , 0, "0001"); // 처음조회시 혹은 연속데이터가 없을때
      OpenAPI.CommRqData("일별데이터조회", "OPT10086" , 2, "0001"); // 연속조회시 (필요에따라 요청)
	  
      ※ 주의할 점 : 
      중간에 다른 TR 요청이 있는 경우 연속조회가 되지 않습니다.
      
	  
      [실시간 데이터]
      시세조회요청이 성공하면 해당종목의 실시간시세 데이터가 서버에 자동으로 등록됩니다.
      이후 해당종목의 실시간 시세데이터는 OnReceiveRealData() 이벤트로 수신됩니다.
      또는 시세조회가 필요없고 실시간시세만 필요한 경우는 
      SetRealReg 함수를 사용하여 특정종목(복수종목 가능)의 실시간시세를 서버에 등록할 수 있습니다.
	  
      ※ SetRealReg() 함수는 조건검색 항목에서 사용법을 설명하고 있습니다.
	  
      KOA Studio의 실시간 탭을 여시면 Real Type (실시간타입) 목록을 확인할 수 있습니다.
      이들 하나하나를 실시간 타입이라고 합니다.
      각 실시간타입에 포함되는 데이터항목들의 FID(Field ID)들이 그룹핑되어 있습니다.
      예를들어 실시간 타입 "주식시세"는 FID 10 현재가 ~ FID 568 하한가발생시간까지 FID로 구성되며 한꺼번에 전달됩니다.
      또 실시간 타입 "주식체결"는 FID 20 체결시간 ~ FID 1313 Extra Item까지 FID가 한번에 전달됩니다.
      
	  
      [실시간시세 사용법]
      시세관련 TR서비스를 요청하는 경우 자동으로 서버에 해당 종목의 실시간시세가 등록 됩니다.
      시세관련 TR서비스 조회요청이 불필요한 경우 SetRealReg 함수를 통해 조회없이 실시간시세 등록이 가능합니다.
		
      방법1. 조회 서비스 이용
      SetInputValue(사용자 호출) -> CommRqData(사용자 호출) -> OnReceiveTrData(이벤트 발생) ->OnReceiveRealData(이벤트 발생)
      방법2. SetRealReg 함수 이용
      SetRealReg(사용자 호출) -> OnReceiveRealData(이벤트 발생)


      [주문관련 실시간 데이터]
      실시간 타입 "주문체결", "잔고", "파생잔고"는 주문관련 실시간 데이터를 전달합니다.
      데이터요청이나 서버등록 필요없이 주문발생시 수신되는 실시간타입 입니다.

      실시간 시세와는 다르게 조회요청이나 SetRealReg() 함수로 등록해서 사용할 수 없습니다.
      반드시 주문을 하셔야 발생합니다.
      수신 이벤트는 OnReceiveChejanData() 입니다.
      영웅문4 HTS, 영웅문S MTS 를 통한 주문들도 동일ID로 접속한 경우 OpenAPI로 수신됩니다.

	  
      아래 실시간 타입은 시스템 내부용으로, 사용자가 사용할수 없는 실시간 타입입니다.
      1. 임의연장정보
      2. 시간외종목정보
      3. 주식거래원
      4. 순간체결량
      5. 선물옵션합계
      6. 투자자별매매
	  
	  
      
  
          [CommRqData() 함수]
          
          CommRqData(
          BSTR sRQName,    // 사용자 구분명 (임의로 지정, 한글지원)
          BSTR sTrCode,    // 조회하려는 TR이름
          long nPrevNext,  // 연속조회여부
          BSTR sScreenNo  // 화면번호 (4자리 숫자 임의로 지정)
          )
          
          조회요청 함수입니다.
          리턴값 0이면 조회요청 정상 나머지는 에러
		  
          예)
          -200 시세과부하
          -201 조회전문작성 에러 
                    [SetInputValue() 함수]
          
          SetInputValue(
          BSTR sID,     // TR에 명시된 Input이름
          BSTR sValue   // Input이름으로 지정한 값
          )
          
          조회요청시 TR의 Input값을 지정하는 함수입니다.
          CommRqData 호출 전에 입력값들을 셋팅합니다.
          각 TR마다 Input 항목이 다릅니다. 순서에 맞게 Input 값들을 셋팅해야 합니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          예)
          [OPT10081 : 주식일봉차트조회요청예시]
          
          SetInputValue("종목코드"	,  "039490"); // 첫번째 입력값 설정
          SetInputValue("기준일자"	,  "20160101");// 두번째 입력값 설정
          SetInputValue("수정주가구분"	,  "1"); // 세번째 입력값 설정
          LONG lRet = CommRqData( "RQName","OPT10081", "0","0600");// 조회요청
          
          [CommGetData() 함수]
          
          일부 TR에서 사용상 제약이 있음므로 이 함수 대신 GetCommData()함수를 사용하시기 바랍니다.
          
          
          [DisconnectRealData() 함수]
          
          DisconnectRealData(
          BSTR sScnNo // 화면번호 
          )
          
          시세데이터를 요청할때 사용된 화면번호를 이용하여 
          해당 화면번호로 등록되어져 있는 종목의 실시간시세를 서버에 등록해지 요청합니다.
          이후 해당 종목의 실시간시세는 수신되지 않습니다.
          단, 해당 종목이 또다른 화면번호로 실시간 등록되어 있는 경우 해당종목에대한 실시간시세 데이터는 계속 수신됩니다.
 
          [GetRepeatCnt() 함수]
          
          GetRepeatCnt(
          BSTR sTrCode, // TR 이름
          BSTR sRecordName // 레코드 이름
          )
          
          데이터 수신시 멀티데이터의 갯수(반복수)를 얻을수 있습니다. 
          예를들어 차트조회는 한번에 최대 900개 데이터를 수신할 수 있는데 
          이렇게 수신한 데이터갯수를 얻을때 사용합니다.
          이 함수는 OnReceiveTRData()이벤트가 발생될때 그 안에서 사용해야 합니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          예)
          [OPT10081 : 주식일봉차트조회요청예시]
          
          OnReceiveTrData(...)
          {
            if(strRQName == _T("주식일봉차트"))
            {
              int nCnt = OpenAPI.GetRepeatCnt(sTrcode, strRQName);		// 데이터 반복건수 구함
              for (int nIdx = 0; nIdx < nCnt; nIdx++)
              {
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("거래량"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("시가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("고가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("저가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("현재가"));   strData.Trim();
              }
            }
          }
  
          [CommKwRqData() 함수]
          
          CommKwRqData(
          BSTR sArrCode,    // 조회하려는 종목코드 리스트
          BOOL bNext,   // 연속조회 여부 0:기본값, 1:연속조회(지원안함)
          int nCodeCount,   // 종목코드 갯수
          int nTypeFlag,    // 0:주식 종목, 3:선물옵션 종목
          BSTR sRQName,   // 사용자 구분명
          BSTR sScreenNo    // 화면번호
          )
          
          한번에 100종목까지 조회할 수 있는 복수종목 조회함수 입니다.
          함수인자로 사용하는 종목코드 리스트는 조회하려는 종목코드 사이에 구분자';'를 추가해서 만들면 됩니다.
          수신되는 데이터는 TR목록에서 복수종목정보요청(OPTKWFID) Output을 참고하시면 됩니다.
          ※ OPTKWFID TR은 CommKwRqData()함수 전용으로 일번적인 조회함수 CommRqData 로는 사용할 수 없습니다.
          ※ OPTKWFID TR은 영웅문4 HTS의 관심종목과는 무관합니다.

          [GetCommData() 함수]
          
          GetCommData(
          BSTR strTrCode,   // TR 이름
          BSTR strRecordName,   // 레코드이름
          long nIndex,      // nIndex번째
          BSTR strItemName) // TR에서 얻어오려는 출력항목이름
          
          OnReceiveTRData()이벤트가 발생될때 수신한 데이터를 얻어오는 함수입니다.
          이 함수는 OnReceiveTRData()이벤트가 발생될때 그 안에서 사용해야 합니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          예)
          [OPT10081 : 주식일봉차트조회요청예시]
          
          OnReceiveTrData(...)
          {
            if(strRQName == _T("주식일봉차트"))
            {
              int nCnt = OpenAPI.GetRepeatCnt(sTrcode, strRQName);
              for (int nIdx = 0; nIdx < nCnt; nIdx++)
              {
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("거래량"));   strData.Trim();	// nIdx번째의 거래량 데이터 구함
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("시가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("고가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("저가"));   strData.Trim();
                strData = OpenAPI.GetCommData(sTrcode, strRQName, nIdx, _T("현재가"));   strData.Trim();
              }
            }
          }
  
          [GetCommRealData() 함수]
          
          GetCommRealData(
          BSTR strCode,   // 종목코드
          long nFid   // 실시간 타입에 포함된FID (Feild ID)
          )
          
          실시간시세 데이터 수신 이벤트인 OnReceiveRealData() 가 발생될때 실시간데이터를 얻어오는 함수입니다.
          이 함수는 OnReceiveRealData()이벤트가 발생될때 그 안에서 사용해야 합니다.
          FID 값은 KOA Studio "실시간목록"탭 에서 확인할 수 있습니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          예)
          [주식체결 실시간 데이터 예시]
          
          if(strRealType == _T("주식체결"))	// OnReceiveRealData 이벤트로 수신된 실시간타입이 "주식체결" 이면
          {
            strRealData = OpenAPI.GetCommRealData(strCode, 10);   // 현재가
            strRealData = OpenAPI.GetCommRealData(strCode, 13);   // 누적거래량
            strRealData = OpenAPI.GetCommRealData(strCode, 228);    // 체결강도
            strRealData = OpenAPI.GetCommRealData(strCode, 20);  // 체결시간
          }
  
          [GetCommDataEx() 함수]
          
          GetCommDataEx(
          BSTR strTrCode,   // TR 이름
          BSTR strRecordName  // 레코드이름
          )
          
          조회 수신데이터 크기가 큰 차트데이터를 한번에 VARIANT형 데이터로 가져올 목적으로 만든 차트조회 전용함수입니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          예)
          [차트일봉데이터 예시]
          
          OnReceiveTrDataKhopenapictrl(...)
          {
            if(strRQName == _T("주식일봉차트"))
            {
              VARIANT   vTemp = OpenAPI.GetCommDataEx(strTrCode, strRQName);
              long	lURows, lUCols;
              long	nIndex[2]
              COleSafeArray saMatrix(vTemp);
              VARIANT vDummy;
              VariantInit(&vDummy);
              saMatrix.GetUBound(1, &lURows); // 데이터 전체갯수(데이터 반복횟수)
              saMatrix.GetUBound(2, &lUCols); // 출력항목갯수

              for(int nRow = 0; nRow <= lURows; nRow ++)
              {
                for(int nCol = 0; nCol <= lUCols; nCol ++)
                {
                  nIndex[0] = lURows;
                  nIndex[1] = lUCols;
                  saMatrix.GetElement(nIndex, &vDummy);
                  ::SysFreeString(vDummy.bstrVal);
                }
              }
              saMatrix.Clear();
              VariantClear(&vTemp);
            }
          }
 
          [OnReceiveTrData() 이벤트]
          
          void OnReceiveTrData(
          BSTR sScrNo,       // 화면번호
          BSTR sRQName,      // 사용자 구분명
          BSTR sTrCode,      // TR이름
          BSTR sRecordName,  // 레코드 이름
          BSTR sPrevNext,    // 연속조회 유무를 판단하는 값 0: 연속(추가조회)데이터 없음, 2:연속(추가조회) 데이터 있음
          LONG nDataLength,  // 사용안함.
          BSTR sErrorCode,   // 사용안함.
          BSTR sMessage,     // 사용안함.
          BSTR sSplmMsg     // 사용안함.
          )
          
          요청했던 조회데이터를 수신했을때 발생됩니다.
          수신된 데이터는 이 이벤트내부에서 GetCommData()함수를 이용해서 얻어올 수 있습니다.
  
          [OnReceiveRealData()이벤트]
          
          OnReceiveRealData(
          BSTR sCode,        // 종목코드
          BSTR sRealType,    // 실시간타입
          BSTR sRealData    // 실시간 데이터 전문 (사용불가)
          )
          
          실시간시세 데이터가 수신될때마다 종목단위로 발생됩니다.
          SetRealReg()함수로 등록한 실시간 데이터도 이 이벤트로 전달됩니다.
          GetCommRealData()함수를 이용해서 수신된 데이터를 얻을수 있습니다.

          [OnReceiveMsg()이벤트]
          
          OnReceiveMsg(
          BSTR sScrNo,   // 화면번호
          BSTR sRQName,  // 사용자 구분명
          BSTR sTrCode,  // TR이름
          BSTR sMsg     // 서버에서 전달하는 메시지
          )
          
          주문전송 또는 계좌, 잔고관련 데이터 조회요청으로 서버 메시지가 수신되면 호출됩니다.
          ※ 메시지에 포함된 6자리 코드번호는 변경될 수 있으니, 여기에 수신된 코드번호를 특정 용도로 사용하지 마시기 바랍니다.
		  
          예) 
          "조회가 완료되었습니다."
          "증거금 부족으로 주문이 거부되었습니다."
          "정정할 원주문 내역이 없습니다."
          "비밀번호 입력을 확인해주시기 바랍니다."

      
      [대체거래소 - 조회, 실시간 시세]

      ※ 주의사항
      OpenAPI TR목록은 요건에 따라 수시로 변경될 수 있으로 주기적으로 OpenAPI버전처리후 KOA Studio로 확인해주세요.
      
      대체거래소 지원으로 한국거래소(이하 KRX), 넥스트레이드(이하 NXT), 통합종목(또는 통합호가종목, 이하 AL)별 종목코드로 분류

      종목코드로 분기 (대상TR 68개)
      입력항목에 "종목코드"가 있는 TR (OPT10001, OPT10002, OPT10003 등)에서 조회
      KRX조회는 기존 6자리 종목코드 그대로 사용
      NXT, 통합종목은 기존 6자리 종목코드에 "_NX", "_AL"추가
      예시) "039490"의 KRX, NXT, 통합종목 종목코드 "039490", "039490_NX", "039490_AL"

      // 통합종목 조회 요청
      SetInputValue("종목코드"	, "039490_AL");
      CommRqData(RQName	, "OPT10001"	,  "0"	, "화면번호"); 

      // NXT 조회 요청
      SetInputValue("종목코드"	, "039490_NX");
      CommRqData(RQName	, "OPT10001"	, "0"	, "화면번호");

      실시간 시세데이터, 종목코드
      // 실시간 시세 데이터 종목코드는 조회한 종목코드로 전달
      "039490_AL" 조회시 "종목코드 = 039490_AL"
      "039490_NX" 조회시 "종목코드 = 039490_NX"

      TR 입력항목 "거래소구분" 추가 (대상 TR 43개)
      거래소구분=1:KRX, 2:NXT, 3:통합
      거래소구분=1, 2, 3으로 조회시 각각 KRX, NXT, 통합종목 데이터 조회

      OPT10016 : 신고저가요청
      OPT10017 : 상하한가요청
      OPT10018 : 고저가근접요청
      OPT10019 : 가격급등락요청
      OPT10020 : 호가잔량상위요청
      OPT10021 : 호가잔량급증요청
      OPT10022 : 잔량율급증요청
      OPT10023 : 거래량급증요청
      OPT10024 : 거래량갱신요청
      OPT10025 : 매물대집중요청
      OPT10026 : 고저PER요청
      OPT10027 : 전일대비등락률상위요청
      OPT10028 : 시가대비등락률요청
      OPT10029 : 예상체결등락률상위요청
      OPT10030 : 당일거래량상위요청
      OPT10031 : 전일거래량상위요청
      OPT10032 : 거래대금상위요청
      OPT10033 : 신용비율상위요청
      OPT10034 : 외인기간별매매상위요청
      OPT10035 : 외인연속순매매상위요청
      OPT10036 : 외인한도소진율증가상위
      OPT10037 : 외국계창구매매상위요청
      OPT10039 : 증권사별매매상위요청
      OPT10042 : 순매수거래원순위요청
      OPT10043 : 거래원매물대분석요청
      OPT10047 : 체결강도추이일별요청
      OPT10051 : 업종별투자자순매수요청
      OPT10052 : 거래원순간거래량요청
      OPT10054 : 변동성완화장치발동종목요청
      OPT10058 : 투자자별일별매매종목요청
      OPT10062 : 동일순매매순위요청
      OPT10063 : 장중투자자별매매요청
      OPT10066 : 장중투자자별매매차트요청
      OPT10131 : 기관외국인연속매매현황요청
      OPT40004 : ETF전체시세요청
      OPT90001 : 테마그룹별요청
      OPT90002 : 테마구성종목요청
      OPT90003 : 프로그램순매수상위50요청
      OPT90004 : 종목별프로그램매매현황요청
      OPT90005 : 프로그램매매추이요청
      OPT90006 : 프로그램매매차익잔고추이요청
      OPT90007 : 프로그램매매누적추이요청
      OPT90009 : 외국인기관매매상위요청

      ※ 주의사항
      OpenAPI TR목록은 요건에 따라 수시로 변경될 수 있으로 OpenAPI버전처리후 KOA Studio로 확인해주세요.
      
      거래소구분=0:통합, 1:KRX, 2:NXT (대상TR 3개)
      거래소구분=0, 1, 2으로 조회시 각각 통합종목 시세, KRX시세, NXT 시세 조회
      OPT10075 : 미체결요청
      OPT10076 : 체결요청
      OPT10085 : 계좌수익률요청

      거래소구분=KRX:한국거래소, NXT:대체거래소 (대상TR 3개)
      OPW00004 : 계좌평가현황요청
      OPW00005 : 체결잔고요청
      OPW00018 : 계좌평가잔고내역요청

      거래소구분=%:전체, KRX:한국거래소, NXT:대체거래소, SOR:최선주문집행 (대상TR 3개)
      OPW00007 : 계좌별주문체결내역상세요청
      OPW00009 : 계좌별주문체결현황요청
      OPW00015 : 위탁종합거래내역요청
      
      
      [조회처리(조회요청)]
      OpenAPI가 제공하는 데이터중에서 원하는 데이터를 서버에 요청해서 수신 받는 것을 말합니다.
      이는 하나의 TR(Transaction)단위로 처리됩니다.
      각 TR은 서버와 데이터를 주고받을때 약속된 규약입니다. 
      각각의 TR은 입력부분(Input)과 출력부분(Output)을 가지고 있습니다.
      Input은 사용하는 TR에따라 항목이 달라지며 사용자(고객)가 입력해야 하는 부분이고,
      Output은 요청에대한 서버의 응답으로 수신되는 데이터 입니다.
      Output은 여러항목으로 제공되며 필요한 항목의 값만을 골라서 얻을 수 있습니다.
      
      출력부분은 항목이 하나로 전달되는 싱글데이터와 복수의 건수로 전달되는 멀티데이터가 있습니다.
      TR에 따라 싱글데이터(또는 멀티데이터)만 있거나 둘다 있는 경우도 있습니다.
      OPT10070 : 당일주요거래원요청 - 싱글데이터
      OPT10081 : 주식일봉차트조회요청 - 싱글 + 멀티데이터
      
      OpenAPI가 제공하는 TR들은 KOA Studio의 "TR목록" 탭에서 찾아볼 수 있습니다.
      이중 필요한 TR을 선택하여 약속된 Input값을 입력 후 서버에 요청하면
      해당 TR에 정의되어 있는 Output 항목들의 값을 구할 수 있습니다.
      
      ※ 주의할 점 : 
      조회시 입력값 항목들은 SetInputValue 함수로 반드시 순서에 맞게 입력해야 합니다.
      계좌비밀번호는 별도의 입력창으로 입력/등록하고 조회시에는 공백으로 입력합니다.
          ex) SetInputValue("비밀번호"	,  ""); 
      
      
      [조회요청/수신 사용법]
      조회요청하고자 하는 TR의 입력값(input)을 셋팅한뒤 조회요청을 합니다.
      서버는 요청에대한 결과를 보내주고 이벤트를 발생시켜 데이터를 수신합니다.
      수신한 데이터중 필요한 항목에 해당하는 값을 구합니다.
		
      SetInputValue(사용자 호출) -> CommRqData(사용자 호출) -> OnReceiveTrData(이벤트 발생)
		
		
      [연속조회]
      TR별로 한번에 전달할 수 있는 데이터 갯수가 정해져 있습니다. 
      이 갯수보다 조회할 데이터가 많을때는 연속조회로 모든 데이터를 조회할 수 있습니다.
      연속조회는 CommRqData()에서 인자값만 바꿔서 다시 요청합니다.

      CommRqData("일별데이터조회", "OPT10086" , 0, "0001");      
      위처럼 요청한 데이터가 한번에 수신된 데이터보다 더 많이 있다면
      OnReceiveTRData()이벤트에서 5번째 인자값(sPrevNext)에 "2"가 전달됩니다.
      이때 더 많은 데이터를 요청하고자 할때는
      CommRqData("일별데이터조회", "OPT10086" , 2, "0001"); 
      위처럼 3번째 인자값을 2로 설정해서 조회하시면 됩니다.
      정리하면 다음과 같습니다.
      OpenAPI.CommRqData("일별데이터조회", "OPT10086" , 0, "0001"); // 처음조회시 혹은 연속데이터가 없을때
      OpenAPI.CommRqData("일별데이터조회", "OPT10086" , 2, "0001"); // 연속조회시 (필요에따라 요청)
	  
      ※ 주의할 점 : 
      중간에 다른 TR 요청이 있는 경우 연속조회가 되지 않습니다.
      
	  
      [실시간 데이터]
      시세조회요청이 성공하면 해당종목의 실시간시세 데이터가 서버에 자동으로 등록됩니다.
      이후 해당종목의 실시간 시세데이터는 OnReceiveRealData() 이벤트로 수신됩니다.
      또는 시세조회가 필요없고 실시간시세만 필요한 경우는 
      SetRealReg 함수를 사용하여 특정종목(복수종목 가능)의 실시간시세를 서버에 등록할 수 있습니다.
	  
      ※ SetRealReg() 함수는 조건검색 항목에서 사용법을 설명하고 있습니다.
	  
      KOA Studio의 실시간 탭을 여시면 Real Type (실시간타입) 목록을 확인할 수 있습니다.
      이들 하나하나를 실시간 타입이라고 합니다.
      각 실시간타입에 포함되는 데이터항목들의 FID(Field ID)들이 그룹핑되어 있습니다.
      예를들어 실시간 타입 "주식시세"는 FID 10 현재가 ~ FID 568 하한가발생시간까지 FID로 구성되며 한꺼번에 전달됩니다.
      또 실시간 타입 "주식체결"는 FID 20 체결시간 ~ FID 1313 Extra Item까지 FID가 한번에 전달됩니다.		                                                                       

      
        [개요]
        OpenAPI를 이용하면 국내주식과 코스피200 지수선물/옵션을 거래할 수 있습니다.
        상품별로 전용 주문함수가 있으며 SendOrderCredit()함수를 이용해서 대주를 제외한 신용주문을 지원합니다.
        ※ 정정주문은 원주문에 대한 가격정정만 가능하며 거래구분을 변경하는 정정주문은 지원하지 않습니다.
        
        [대체거래소 주문]
        ※ 종목코드는 현금/신용주문 모두 기존 6자리 종목코드 사용. "039490"
        NXT, SOR 주문유형(또는 매매유형)추가, 현금/신용주문함수 공통

        NXT주문   21=NXT매수, 22=NXT매도, 23=NXT취소, 25= NXT정정 (주의 24 아님!!)
        SOR주문   11=SOR매수, 12=SOR매도, 13=SOR취소, 15=SOR정정 (주의 14 아님!!)
        
        중간가 주문
        현금주문, 신용주문 공통으로 거래구분(호가구분)값 "29"로 설정, 주문가격은 '0'으로 설정
        
        스탑지정가 주문
        기존 함수는 스탑가 설정불가로 KOA_Functions()를 이용한 별도 현금/신용 주문함수를 제공
        기존 현금주문, 신용 주문함수에 2개 인자 "스탑지정가격", "예약인자" 추가
        
        현금주문 예시
        KOA_Functions("SendOrder_Ex", strParam); // 기본 함수명과 파라미터
        KOA_Functions("sendorder_ex", strParam); // 소문자 함수명 사용가능
        
        
        신용주문 예시
        KOA_Functions("SendOrderCredit_Ex", strParam); // 기본 함수명과 파라미터
        KOA_Functions("sendordercredit_ex", strParam); // 소문자 함수명 사용가능
        
        
        [계좌비밀번호 설정]
        OpenAPI는 로그인 후 한번 계좌비밀번호를 입력/등록 해야 합니다.
        계좌비밀번호 설정은 계좌비밀번호 입력창에서만 가능합니다.
        이 입력창을 출력하는 방법은 2가지로 제공됩니다.
        1. 메뉴이용 - 로그인후 윈도우의 작업표시줄상에 깜박이는 트레이아이콘의 
          마우스우측 메뉴(모니터 오른쪽 하단)에서 "계좌비밀번호 저장" 선택
        2. 함수이용 - 로그인후 OpenAPI.KOA_Functions(_T("ShowAccountWindow"), _T("")) 호출
        ※ 계좌비밀번호 입력시 주의할 점 : 
        OpenAPI는 계좌비밀번호를 검증하지 않고 입력된 값을 그대로 암호화하여 서버로 전송합니다.
        계좌비밀번호 오류가 일어나지 않도록 오타 등 입력에 주의하시기 바랍니다.

        [조건검색 개요]
        OpenAPI에서 제공하는 조건검색 기능은 영웅문4 HTS에서 작성/저장된 조건식을 불러와 사용하는 방식입니다.
        조건검색 수식작성이나 조건식 편집 및 저장은 OpenAPI에서 지원하지 않습니다.
        영웅문4 HTS를 통해 편집/저장된 사용자 조건식만 사용 가능합니다.
        
        조건검색 전용 함수와 이벤트가 제공됩니다.
        이를 이용해서 조건검색과 실시간 조건검색을 사용할 수 있습니다.
        ※ 조건검색 요청을 반복하는 방법이 아닌, 실시간 조건검색 사용을 권장합니다.
        ※ 서버에서 실시간조건검색 준비가 완료되는 시점은 07:30 입니다. 
                SendCondition 조건검색 요청은 07:30 이후에 사용해주시기 바랍니다.
        ※ 실시간으로 편입되는 종목이 순간적으로 편입/이탈을 반복하는 경우, 서버에따라 결과가 일시적으로 HTS 등과 다를 수 있습니다.

        
        [조건검색 사용법]
        접속(로그인) 후 GetConditionLoad() 함수를 호출하여 영웅문4를 통해 
        서버에 저장되어 있는 '내조건식' 들을 요청합니다.
        이에대한 응답으로 OnReceiveConditionVer() 이벤트가 발생합니다.
        OnReceiveConditionVer() 이벤트 안에서 GetConditionNameList() 함수를 사용하여
        '내조건식' 리스트를 얻습니다.
		
        이중 원하는 조건식으로 조건검색 요청 함수 SendCondition() 를 호출합니다.
        이에대한 서버의 응답은 OnReceiveTrCondition() 이벤트로 수신됩니다.
        실시간 옵션으로 요청한 경우 해당 조건식에 실시간으로 편입/이탈 되는 종목은
        OnReceiveRealCondition() 이벤트로 수신됩니다.
		
        ※ GetConditionNameList 로 구한 조건식 이름과 조건식의 고유 번호를 
            SendCondition 함수 사용시 정확하게 입력해야 합니다.
			
        GetConditionLoad (사용자 호출) -> OnReceiveConditionVer (이벤트 발생) -> GetConditionNameList (사용자 호출)
          -> SendCondition (사용자 호출) -> OnReceiveTrCondition (이벤트 발생) -> OnReceiveRealCondition (이벤트 발생)


        [조건검색 제한]
        조건검색 요청은 1초당 5회 조회횟수 제한에 포함됩니다.
        동일 조건식에 대한 조건검색 요청은 1분에 1회로 제한됩니다.
        조건검색 결과가 100종목을 넘게 되면 해당조건은 실시간 조건검색 신호를 수신할 수 없습니다.
        실시간 조건검색은 최대 10개까지 사용 가능합니다.
        ※ 조건검색 제한에대한 자세한 내용은 하단에 추가합니다.


        10개 조건검색식을 한번에 모두 조회하는 프로그램이 있으며 조건검색만 요청한다고 가정해서 설명하면 다음과 같습니다.
        
        ------------------------------------------------------------------------------------------------------------------------------------
        
        첫번째 제한조건 : 1초에 5회만 조회가능
        두번째 제한조건 : 조건별 1분당 1회로 제한(실시간 조건검색 수신에는 영향없음)
        
        09:00:00  조회 시작
        1번부터 5번 조건식은 조회성공(첫번째 제한조건, 두번째 제한조건 모두 만족)
        6번부터 10번 조건식은 조회실패(첫번째 제한조건)
        
        09:00:01 조회 재시작(1초후 재조회)
        1번부터 5번 조건식은 조회실패(두번째 제한조건)
        6번부터 10번 조건식은 조회성공(첫번째 제한조건, 두번째 제한조건 모두 만족)
        ... ... ...
        
        09:01:00 조회시작 (첫조회 1분후)
        1번부터 5번 조건식은 조회성공(첫번째 제한조건, 두번째 제한조건 모두 만족)
        6번부터 10번 조건식은 조회실패(첫번째 제한조건)
        
        09:00:01 조회 재시작(1분 1초후 재조회)
        1번부터 5번 조건식은 조회실패(두번째 제한조건)
        6번부터 10번 조건식은 조회성공(첫번째 제한조건, 두번째 제한조건 모두 만족)